
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)
Loaded SDC plugin

1. Executing Liberty frontend: /home/nakanomiku/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.
[INFO] Using SDC file '/home/nakanomiku/DigitalDesign/pm32/runs/RUN_2024-10-23_17-42-47/06-yosys-synthesis/synthesis.abc.sdc' for ABCâ€¦

2. Executing Verilog-2005 frontend: /home/nakanomiku/DigitalDesign/pm32/pm32.v
Parsing SystemVerilog input from `/home/nakanomiku/DigitalDesign/pm32/pm32.v' to AST representation.
Storing AST representation for module `$abstract\pm32'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/nakanomiku/DigitalDesign/pm32/spm.v
Parsing SystemVerilog input from `/home/nakanomiku/DigitalDesign/pm32/spm.v' to AST representation.
Storing AST representation for module `$abstract\spm'.
Storing AST representation for module `$abstract\CSADD'.
Storing AST representation for module `$abstract\TCMP'.
Successfully finished Verilog frontend.

4. Executing HIERARCHY pass (managing design hierarchy).

5. Executing AST frontend in derive mode using pre-parsed AST for module `\pm32'.
Generating RTLIL representation for module `\pm32'.

5.1. Analyzing design hierarchy..
Top module:  \pm32
Parameter \SIZE = 32

5.2. Executing AST frontend in derive mode using pre-parsed AST for module `\spm'.
Parameter \SIZE = 32
Generating RTLIL representation for module `$paramod\spm\SIZE=s32'00000000000000000000000000100000'.

5.3. Analyzing design hierarchy..
Top module:  \pm32
Used module:     $paramod\spm\SIZE=s32'00000000000000000000000000100000

5.4. Executing AST frontend in derive mode using pre-parsed AST for module `\CSADD'.
Generating RTLIL representation for module `\CSADD'.

5.5. Executing AST frontend in derive mode using pre-parsed AST for module `\TCMP'.
Generating RTLIL representation for module `\TCMP'.

5.6. Analyzing design hierarchy..
Top module:  \pm32
Used module:     $paramod\spm\SIZE=s32'00000000000000000000000000100000
Used module:         \CSADD
Used module:         \TCMP

5.7. Analyzing design hierarchy..
Top module:  \pm32
Used module:     $paramod\spm\SIZE=s32'00000000000000000000000000100000
Used module:         \CSADD
Used module:         \TCMP
Removing unused module `$abstract\TCMP'.
Removing unused module `$abstract\CSADD'.
Removing unused module `$abstract\spm'.
Removing unused module `$abstract\pm32'.
Removed 4 unused modules.
Renaming module pm32 to pm32.

6. Generating Graphviz representation of design.
Writing dot description to `/home/nakanomiku/DigitalDesign/pm32/runs/RUN_2024-10-23_17-42-47/06-yosys-synthesis/hierarchy.dot'.
Dumping module pm32 to page 1.

7. Executing TRIBUF pass.

8. Executing HIERARCHY pass (managing design hierarchy).

8.1. Analyzing design hierarchy..
Top module:  \pm32
Used module:     $paramod\spm\SIZE=s32'00000000000000000000000000100000
Used module:         \CSADD
Used module:         \TCMP

8.2. Analyzing design hierarchy..
Top module:  \pm32
Used module:     $paramod\spm\SIZE=s32'00000000000000000000000000100000
Used module:         \CSADD
Used module:         \TCMP
Removed 0 unused modules.

9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:57$11 in module pm32.
Marked 2 switch rules as full_case in process $proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:49$7 in module pm32.
Marked 1 switch rules as full_case in process $proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:41$5 in module pm32.
Marked 4 switch rules as full_case in process $proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:30$2 in module pm32.
Marked 1 switch rules as full_case in process $proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:24$1 in module pm32.
Marked 1 switch rules as full_case in process $proc$/home/nakanomiku/DigitalDesign/pm32/spm.v:59$52 in module CSADD.
Marked 1 switch rules as full_case in process $proc$/home/nakanomiku/DigitalDesign/pm32/spm.v:81$54 in module TCMP.
Removed a total of 0 dead cases.

11. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 5 redundant assignments.
Promoted 3 assignments to connections.

12. Executing PROC_INIT pass (extract init attributes).

13. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:57$11'.
Found async reset \rst in `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:49$7'.
Found async reset \rst in `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:24$1'.
Found async reset \rst in `\CSADD.$proc$/home/nakanomiku/DigitalDesign/pm32/spm.v:59$52'.
Found async reset \rst in `\TCMP.$proc$/home/nakanomiku/DigitalDesign/pm32/spm.v:81$54'.

14. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~9 debug messages>

15. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:57$11'.
     1/1: $0\p[63:0]
Creating decoders for process `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:49$7'.
     1/1: $0\Y[31:0]
Creating decoders for process `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:41$5'.
     1/1: $1\ncnt[7:0]
Creating decoders for process `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:38$4'.
Creating decoders for process `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:30$2'.
     1/4: $4\nstate[1:0]
     2/4: $3\nstate[1:0]
     3/4: $2\nstate[1:0]
     4/4: $1\nstate[1:0]
Creating decoders for process `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:24$1'.
     1/1: $0\state[1:0]
Creating decoders for process `\CSADD.$proc$/home/nakanomiku/DigitalDesign/pm32/spm.v:59$52'.
     1/2: $0\sc[0:0]
     2/2: $0\sum[0:0]
Creating decoders for process `\TCMP.$proc$/home/nakanomiku/DigitalDesign/pm32/spm.v:81$54'.
     1/2: $0\s[0:0]
     2/2: $0\z[0:0]

16. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\pm32.\ncnt' from process `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:41$5'.
No latch inferred for signal `\pm32.\nstate' from process `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:30$2'.

17. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\pm32.\p' using process `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:57$11'.
  created $adff cell `$procdff$99' with positive edge clock and positive level reset.
Creating register for signal `\pm32.\Y' using process `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:49$7'.
  created $adff cell `$procdff$102' with positive edge clock and positive level reset.
Creating register for signal `\pm32.\cnt' using process `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:38$4'.
  created $dff cell `$procdff$103' with positive edge clock.
Creating register for signal `\pm32.\state' using process `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:24$1'.
  created $adff cell `$procdff$106' with positive edge clock and positive level reset.
Creating register for signal `\CSADD.\sc' using process `\CSADD.$proc$/home/nakanomiku/DigitalDesign/pm32/spm.v:59$52'.
  created $adff cell `$procdff$109' with positive edge clock and positive level reset.
Creating register for signal `\CSADD.\sum' using process `\CSADD.$proc$/home/nakanomiku/DigitalDesign/pm32/spm.v:59$52'.
  created $adff cell `$procdff$112' with positive edge clock and positive level reset.
Creating register for signal `\TCMP.\s' using process `\TCMP.$proc$/home/nakanomiku/DigitalDesign/pm32/spm.v:81$54'.
  created $adff cell `$procdff$115' with positive edge clock and positive level reset.
Creating register for signal `\TCMP.\z' using process `\TCMP.$proc$/home/nakanomiku/DigitalDesign/pm32/spm.v:81$54'.
  created $adff cell `$procdff$118' with positive edge clock and positive level reset.

18. Executing PROC_MEMWR pass (convert process memory writes to cells).

19. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:57$11'.
Removing empty process `pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:57$11'.
Found and cleaned up 2 empty switches in `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:49$7'.
Removing empty process `pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:49$7'.
Found and cleaned up 1 empty switch in `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:41$5'.
Removing empty process `pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:41$5'.
Removing empty process `pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:38$4'.
Found and cleaned up 4 empty switches in `\pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:30$2'.
Removing empty process `pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:30$2'.
Removing empty process `pm32.$proc$/home/nakanomiku/DigitalDesign/pm32/pm32.v:24$1'.
Removing empty process `CSADD.$proc$/home/nakanomiku/DigitalDesign/pm32/spm.v:59$52'.
Removing empty process `TCMP.$proc$/home/nakanomiku/DigitalDesign/pm32/spm.v:81$54'.
Cleaned up 9 empty switches.

20. Executing CHECK pass (checking for obvious problems).
Checking module pm32...
Checking module CSADD...
Checking module $paramod\spm\SIZE=s32'00000000000000000000000000100000...
Checking module TCMP...
Found and reported 0 problems.

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.
<suppressed ~7 debug messages>
Optimizing module CSADD.
<suppressed ~2 debug messages>
Optimizing module $paramod\spm\SIZE=s32'00000000000000000000000000100000.
Optimizing module TCMP.
<suppressed ~2 debug messages>

22. Executing FLATTEN pass (flatten design).
Deleting now unused module CSADD.
Deleting now unused module $paramod\spm\SIZE=s32'00000000000000000000000000100000.
Deleting now unused module TCMP.
<suppressed ~33 debug messages>

23. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.

24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..
Removed 0 unused cells and 312 unused wires.
<suppressed ~2 debug messages>

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pm32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$75.
    dead port 2/2 on $mux $procmux$82.
    dead port 2/2 on $mux $procmux$90.
Removed 3 multiplexer ports.
<suppressed ~5 debug messages>

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pm32.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.

25.9. Rerunning OPT passes. (Maybe there is more to do..)

25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pm32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pm32.
Performed a total of 0 changes.

25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
Removed a total of 0 cells.

25.13. Executing OPT_DFF pass (perform DFF optimizations).

25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..

25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.

25.16. Finished OPT passes. (There is nothing left to do.)

26. Executing FSM pass (extract and optimize FSM).

26.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking pm32.state as FSM state register:
    Circuit seems to be self-resetting.

26.2. Executing FSM_EXTRACT pass (extracting FSM from design).

26.3. Executing FSM_OPT pass (simple optimizations of FSMs).

26.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..

26.5. Executing FSM_OPT pass (simple optimizations of FSMs).

26.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

26.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

26.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27. Executing OPT pass (performing simple optimizations).

27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.

27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
Removed a total of 0 cells.

27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pm32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pm32.
Performed a total of 0 changes.

27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
Removed a total of 0 cells.

27.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$99 ($adff) from module pm32 (D = $0\p[63:0], Q = \p).
Adding SRST signal on $procdff$103 ($dff) from module pm32 (D = $add$/home/nakanomiku/DigitalDesign/pm32/pm32.v:44$6_Y [7:0], Q = \cnt, rval = 8'00000000).
Adding EN signal on $procdff$102 ($adff) from module pm32 (D = $0\Y[31:0], Q = \Y).

27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.
<suppressed ~2 debug messages>

27.9. Rerunning OPT passes. (Maybe there is more to do..)

27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pm32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pm32.
Performed a total of 0 changes.

27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

27.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.

27.16. Rerunning OPT passes. (Maybe there is more to do..)

27.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pm32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

27.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pm32.
Performed a total of 0 changes.

27.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
Removed a total of 0 cells.

27.20. Executing OPT_DFF pass (perform DFF optimizations).

27.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..

27.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.

27.23. Finished OPT passes. (There is nothing left to do.)

28. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 8) from port B of cell pm32.$eq$/home/nakanomiku/DigitalDesign/pm32/pm32.v:33$3 ($eq).
Removed top 31 bits (of 32) from port B of cell pm32.$add$/home/nakanomiku/DigitalDesign/pm32/pm32.v:44$6 ($add).
Removed top 24 bits (of 32) from port Y of cell pm32.$add$/home/nakanomiku/DigitalDesign/pm32/pm32.v:44$6 ($add).
Removed top 1 bits (of 2) from port B of cell pm32.$eq$/home/nakanomiku/DigitalDesign/pm32/pm32.v:54$9 ($eq).
Removed top 1 bits (of 2) from mux cell pm32.$procmux$88 ($mux).
Removed top 1 bits (of 2) from wire pm32.$2\nstate[1:0].
Removed top 24 bits (of 32) from wire pm32.$add$/home/nakanomiku/DigitalDesign/pm32/pm32.v:44$6_Y.

29. Executing PEEPOPT pass (run peephole optimizers).

30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

31. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module pm32:
  creating $macc model for $add$/home/nakanomiku/DigitalDesign/pm32/pm32.v:44$6 ($add).
  creating $alu model for $macc $add$/home/nakanomiku/DigitalDesign/pm32/pm32.v:44$6.
  creating $alu cell for $add$/home/nakanomiku/DigitalDesign/pm32/pm32.v:44$6: $auto$alumacc.cc:485:replace_alu$161
  created 1 $alu and 0 $macc cells.

32. Executing SHARE pass (SAT-based resource sharing).

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
Removed a total of 0 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pm32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pm32.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.

33.9. Finished OPT passes. (There is nothing left to do.)

34. Executing MEMORY pass.

34.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

34.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

34.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

34.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

34.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

34.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..

34.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

34.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..

34.10. Executing MEMORY_COLLECT pass (generating $mem cells).

35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.
<suppressed ~4 debug messages>

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
Removed a total of 0 cells.

36.3. Executing OPT_DFF pass (perform DFF optimizations).

36.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

36.5. Finished fast OPT passes.

37. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
Removed a total of 0 cells.

38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pm32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pm32.
Performed a total of 0 changes.

38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
Removed a total of 0 cells.

38.6. Executing OPT_SHARE pass.

38.7. Executing OPT_DFF pass (perform DFF optimizations).

38.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..

38.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.

38.10. Finished OPT passes. (There is nothing left to do.)

39. Executing TECHMAP pass (map to technology primitives).

39.1. Executing Verilog-2005 frontend: /nix/store/c26m31cifv9fyym8p72j6cj5ilqgnh2z-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/c26m31cifv9fyym8p72j6cj5ilqgnh2z-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

39.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
No more expansions possible.
<suppressed ~530 debug messages>

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.
<suppressed ~69 debug messages>

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..
Removed 9 unused cells and 71 unused wires.
<suppressed ~10 debug messages>

40.5. Finished fast OPT passes.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
Removed a total of 0 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..

41.5. Finished fast OPT passes.

42. Executing ABC pass (technology mapping using ABC).

42.1. Extracting gate netlist of module `\pm32' to `<abc-temp-dir>/input.blif'..
Extracted 333 gates and 568 wires to a netlist network with 234 inputs and 173 outputs.

42.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

42.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       31
ABC RESULTS:               NOR cells:        1
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:               NOT cells:        3
ABC RESULTS:                OR cells:        9
ABC RESULTS:               AND cells:       37
ABC RESULTS:              NAND cells:        3
ABC RESULTS:              XNOR cells:       63
ABC RESULTS:            ANDNOT cells:      137
ABC RESULTS:               XOR cells:       38
ABC RESULTS:        internal signals:      161
ABC RESULTS:           input signals:      234
ABC RESULTS:          output signals:      173
Removing temp directory.

43. Executing OPT pass (performing simple optimizations).

43.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.
<suppressed ~8 debug messages>

43.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
Removed a total of 0 cells.

43.3. Executing OPT_DFF pass (perform DFF optimizations).

43.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..
Removed 0 unused cells and 551 unused wires.
<suppressed ~128 debug messages>

43.5. Finished fast OPT passes.

44. Executing HIERARCHY pass (managing design hierarchy).

44.1. Analyzing design hierarchy..
Top module:  \pm32

44.2. Analyzing design hierarchy..
Top module:  \pm32
Removed 0 unused modules.

45. Executing CHECK pass (checking for obvious problems).
Checking module pm32...
Found and reported 0 problems.

46. Printing statistics.

=== pm32 ===

   Number of wires:                399
   Number of wire bits:            733
   Number of public wires:         207
   Number of public wire bits:     433
   Number of ports:                  7
   Number of port bits:            132
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                529
     $_ANDNOT_                     137
     $_AND_                         37
     $_DFFE_PP0P_                   96
     $_DFF_PP0_                     66
     $_MUX_                         31
     $_NAND_                         3
     $_NOR_                          1
     $_NOT_                          3
     $_ORNOT_                        4
     $_OR_                           9
     $_SDFF_PN0_                     8
     $_XNOR_                        63
     $_XOR_                         38
     $scopeinfo                     33

47. Generating Graphviz representation of design.
Writing dot description to `/home/nakanomiku/DigitalDesign/pm32/runs/RUN_2024-10-23_17-42-47/06-yosys-synthesis/primitive_techmap.dot'.
Dumping module pm32 to page 1.

48. Executing OPT pass (performing simple optimizations).

48.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.

48.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
Removed a total of 0 cells.

48.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pm32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

48.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pm32.
Performed a total of 0 changes.

48.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pm32'.
Removed a total of 0 cells.

48.6. Executing OPT_DFF pass (perform DFF optimizations).

48.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..

48.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pm32.

48.9. Finished OPT passes. (There is nothing left to do.)

49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..
Removed 33 unused cells and 101 unused wires.
<suppressed ~134 debug messages>
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/nakanomiku/DigitalDesign/pm32/runs/RUN_2024-10-23_17-42-47/tmp/a3ac00e4c79e47eb87982dde4e52beaa.lib ",
   "modules": {
      "\\pm32": {
         "num_wires":         298,
         "num_wire_bits":     571,
         "num_pub_wires":     106,
         "num_pub_wire_bits": 271,
         "num_ports":         7,
         "num_port_bits":     132,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         496,
         "num_cells_by_type": {
            "$_ANDNOT_": 137,
            "$_AND_": 37,
            "$_DFFE_PP0P_": 96,
            "$_DFF_PP0_": 66,
            "$_MUX_": 31,
            "$_NAND_": 3,
            "$_NOR_": 1,
            "$_NOT_": 3,
            "$_ORNOT_": 4,
            "$_OR_": 9,
            "$_SDFF_PN0_": 8,
            "$_XNOR_": 63,
            "$_XOR_": 38
         }
      }
   },
      "design": {
         "num_wires":         298,
         "num_wire_bits":     571,
         "num_pub_wires":     106,
         "num_pub_wire_bits": 271,
         "num_ports":         7,
         "num_port_bits":     132,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         496,
         "num_cells_by_type": {
            "$_ANDNOT_": 137,
            "$_AND_": 37,
            "$_DFFE_PP0P_": 96,
            "$_DFF_PP0_": 66,
            "$_MUX_": 31,
            "$_NAND_": 3,
            "$_NOR_": 1,
            "$_NOT_": 3,
            "$_ORNOT_": 4,
            "$_OR_": 9,
            "$_SDFF_PN0_": 8,
            "$_XNOR_": 63,
            "$_XOR_": 38
         }
      }
}

50. Printing statistics.

=== pm32 ===

   Number of wires:                298
   Number of wire bits:            571
   Number of public wires:         106
   Number of public wire bits:     271
   Number of ports:                  7
   Number of port bits:            132
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                496
     $_ANDNOT_                     137
     $_AND_                         37
     $_DFFE_PP0P_                   96
     $_DFF_PP0_                     66
     $_MUX_                         31
     $_NAND_                         3
     $_NOR_                          1
     $_NOT_                          3
     $_ORNOT_                        4
     $_OR_                           9
     $_SDFF_PN0_                     8
     $_XNOR_                        63
     $_XOR_                         38

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_MUX_ is unknown!
   Area for cell type $_DFF_PP0_ is unknown!
   Area for cell type $_DFFE_PP0P_ is unknown!
   Area for cell type $_SDFF_PN0_ is unknown!

[INFO] Applying tri-state buffer mapping from '/home/nakanomiku/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'â€¦

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /home/nakanomiku/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/nakanomiku/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/home/nakanomiku/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â€¦

53. Executing TECHMAP pass (map to technology primitives).

53.1. Executing Verilog-2005 frontend: /home/nakanomiku/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/nakanomiku/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

53.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

54. Executing SIMPLEMAP pass (map simple cells to gate primitives).

55. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

55.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\pm32':
  mapped 162 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 8 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/nakanomiku/DigitalDesign/pm32/runs/RUN_2024-10-23_17-42-47/tmp/a3ac00e4c79e47eb87982dde4e52beaa.lib ",
   "modules": {
      "\\pm32": {
         "num_wires":         564,
         "num_wire_bits":     837,
         "num_pub_wires":     106,
         "num_pub_wire_bits": 271,
         "num_ports":         7,
         "num_port_bits":     132,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         762,
         "area":              4426.745600,
         "num_cells_by_type": {
            "$_ANDNOT_": 137,
            "$_AND_": 37,
            "$_MUX_": 135,
            "$_NAND_": 3,
            "$_NOR_": 1,
            "$_NOT_": 165,
            "$_ORNOT_": 4,
            "$_OR_": 9,
            "$_XNOR_": 63,
            "$_XOR_": 38,
            "sky130_fd_sc_hd__dfrtp_2": 162,
            "sky130_fd_sc_hd__dfxtp_2": 8
         }
      }
   },
      "design": {
         "num_wires":         564,
         "num_wire_bits":     837,
         "num_pub_wires":     106,
         "num_pub_wire_bits": 271,
         "num_ports":         7,
         "num_port_bits":     132,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         762,
         "area":              4426.745600,
         "num_cells_by_type": {
            "$_ANDNOT_": 137,
            "$_AND_": 37,
            "$_MUX_": 135,
            "$_NAND_": 3,
            "$_NOR_": 1,
            "$_NOT_": 165,
            "$_ORNOT_": 4,
            "$_OR_": 9,
            "$_XNOR_": 63,
            "$_XOR_": 38,
            "sky130_fd_sc_hd__dfrtp_2": 162,
            "sky130_fd_sc_hd__dfxtp_2": 8
         }
      }
}

56. Printing statistics.

=== pm32 ===

   Number of wires:                564
   Number of wire bits:            837
   Number of public wires:         106
   Number of public wire bits:     271
   Number of ports:                  7
   Number of port bits:            132
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                762
     $_ANDNOT_                     137
     $_AND_                         37
     $_MUX_                        135
     $_NAND_                         3
     $_NOR_                          1
     $_NOT_                        165
     $_ORNOT_                        4
     $_OR_                           9
     $_XNOR_                        63
     $_XOR_                         38
     sky130_fd_sc_hd__dfrtp_2      162
     sky130_fd_sc_hd__dfxtp_2        8

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_MUX_ is unknown!

   Chip area for module '\pm32': 4426.745600
     of which used for sequential elements: 4426.745600 (100.00%)

[INFO] Using generated ABC script '/home/nakanomiku/DigitalDesign/pm32/runs/RUN_2024-10-23_17-42-47/06-yosys-synthesis/AREA_0.abc'â€¦

57. Executing ABC pass (technology mapping using ABC).

57.1. Extracting gate netlist of module `\pm32' to `/tmp/yosys-abc-4P02zD/input.blif'..
Extracted 592 gates and 829 wires to a netlist network with 236 inputs and 333 outputs.

57.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-4P02zD/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-4P02zD/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-4P02zD/input.blif 
ABC: + read_lib -w /home/nakanomiku/DigitalDesign/pm32/runs/RUN_2024-10-23_17-42-47/tmp/a3ac00e4c79e47eb87982dde4e52beaa.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/nakanomiku/DigitalDesign/pm32/runs/RUN_2024-10-23_17-42-47/tmp/a3ac00e4c79e47eb87982dde4e52beaa.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.04 sec
ABC: Memory =    9.54 MB. Time =     0.04 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/nakanomiku/DigitalDesign/pm32/runs/RUN_2024-10-23_17-42-47/06-yosys-synthesis/synthesis.abc.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + source /home/nakanomiku/DigitalDesign/pm32/runs/RUN_2024-10-23_17-42-47/06-yosys-synthesis/AREA_0.abc 
ABC: Error: The network is combinational.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =    512 ( 32.0 %)   Cap = 20.2 ff (  4.0 %)   Area =     3652.25 ( 68.0 %)   Delay =  2123.48 ps  ( 13.5 %)               
ABC: Path  0 --     102 : 0    2 pi                       A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =   6.3 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     570 : 1    3 sky130_fd_sc_hd__inv_2   A =   3.75  Df =  28.7  -13.3 ps  S =  29.6 ps  Cin =  4.5 ff  Cout =   4.8 ff  Cmax = 331.4 ff  G =  103  
ABC: Path  2 --     574 : 2    7 sky130_fd_sc_hd__or2_2   A =   6.26  Df = 341.2 -148.1 ps  S = 130.9 ps  Cin =  1.5 ff  Cout =  23.7 ff  Cmax = 299.4 ff  G = 1545  
ABC: Path  3 --     579 : 2   66 sky130_fd_sc_hd__nor2_2  A =   6.26  Df =1635.3-1144.4 ps  S =1709.3 ps  Cin =  4.4 ff  Cout = 165.4 ff  Cmax = 141.9 ff  G = 3526  
ABC: Path  4 --     581 : 5    1 sky130_fd_sc_hd__a221o_2 A =  11.26  Df =2123.5-1108.5 ps  S = 193.5 ps  Cin =  2.3 ff  Cout =  33.4 ff  Cmax = 299.4 ff  G = 1437  
ABC: Start-point = pi101 (\state [0]).  End-point = po1 ($auto$rtlil.cc:2739:MuxGate$1616).
ABC: netlist                       : i/o =  236/  333  lat =    0  nd =   512  edge =   1145  area =3652.54  delay = 4.00  lev = 4
ABC: + write_blif /tmp/yosys-abc-4P02zD/output.blif 

57.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       29
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       66
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       61
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       95
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       31
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       35
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:      164
ABC RESULTS:        internal signals:      260
ABC RESULTS:           input signals:      236
ABC RESULTS:          output signals:      333
Removing temp directory.

58. Executing SETUNDEF pass (replace undef values with defined constants).

59. Executing HILOMAP pass (mapping to constant drivers).

60. Executing SPLITNETS pass (splitting up multi-bit signals).

61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pm32..
Removed 0 unused cells and 836 unused wires.
<suppressed ~1 debug messages>

62. Executing INSBUF pass (insert buffer cells for connected wires).

63. Executing CHECK pass (checking for obvious problems).
Checking module pm32...
Found and reported 0 problems.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/nakanomiku/DigitalDesign/pm32/runs/RUN_2024-10-23_17-42-47/tmp/a3ac00e4c79e47eb87982dde4e52beaa.lib ",
   "modules": {
      "\\pm32": {
         "num_wires":         624,
         "num_wire_bits":     749,
         "num_pub_wires":     146,
         "num_pub_wire_bits": 271,
         "num_ports":         7,
         "num_port_bits":     132,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         682,
         "area":              8078.998400,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a21o_2": 2,
            "sky130_fd_sc_hd__a21oi_2": 3,
            "sky130_fd_sc_hd__a221o_2": 2,
            "sky130_fd_sc_hd__a22o_2": 66,
            "sky130_fd_sc_hd__a2bb2o_2": 1,
            "sky130_fd_sc_hd__a31o_2": 1,
            "sky130_fd_sc_hd__and2_2": 3,
            "sky130_fd_sc_hd__and2b_2": 1,
            "sky130_fd_sc_hd__and3_2": 4,
            "sky130_fd_sc_hd__and3b_2": 2,
            "sky130_fd_sc_hd__and4_2": 2,
            "sky130_fd_sc_hd__dfrtp_2": 162,
            "sky130_fd_sc_hd__dfxtp_2": 8,
            "sky130_fd_sc_hd__inv_2": 164,
            "sky130_fd_sc_hd__nand2_2": 95,
            "sky130_fd_sc_hd__nand3_2": 1,
            "sky130_fd_sc_hd__nor2_2": 6,
            "sky130_fd_sc_hd__o21a_2": 1,
            "sky130_fd_sc_hd__o21ai_2": 35,
            "sky130_fd_sc_hd__o221a_2": 29,
            "sky130_fd_sc_hd__or2_2": 61,
            "sky130_fd_sc_hd__or4_2": 1,
            "sky130_fd_sc_hd__or4b_2": 1,
            "sky130_fd_sc_hd__xor2_2": 31
         }
      }
   },
      "design": {
         "num_wires":         624,
         "num_wire_bits":     749,
         "num_pub_wires":     146,
         "num_pub_wire_bits": 271,
         "num_ports":         7,
         "num_port_bits":     132,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         682,
         "area":              8078.998400,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a21o_2": 2,
            "sky130_fd_sc_hd__a21oi_2": 3,
            "sky130_fd_sc_hd__a221o_2": 2,
            "sky130_fd_sc_hd__a22o_2": 66,
            "sky130_fd_sc_hd__a2bb2o_2": 1,
            "sky130_fd_sc_hd__a31o_2": 1,
            "sky130_fd_sc_hd__and2_2": 3,
            "sky130_fd_sc_hd__and2b_2": 1,
            "sky130_fd_sc_hd__and3_2": 4,
            "sky130_fd_sc_hd__and3b_2": 2,
            "sky130_fd_sc_hd__and4_2": 2,
            "sky130_fd_sc_hd__dfrtp_2": 162,
            "sky130_fd_sc_hd__dfxtp_2": 8,
            "sky130_fd_sc_hd__inv_2": 164,
            "sky130_fd_sc_hd__nand2_2": 95,
            "sky130_fd_sc_hd__nand3_2": 1,
            "sky130_fd_sc_hd__nor2_2": 6,
            "sky130_fd_sc_hd__o21a_2": 1,
            "sky130_fd_sc_hd__o21ai_2": 35,
            "sky130_fd_sc_hd__o221a_2": 29,
            "sky130_fd_sc_hd__or2_2": 61,
            "sky130_fd_sc_hd__or4_2": 1,
            "sky130_fd_sc_hd__or4b_2": 1,
            "sky130_fd_sc_hd__xor2_2": 31
         }
      }
}

64. Printing statistics.

=== pm32 ===

   Number of wires:                624
   Number of wire bits:            749
   Number of public wires:         146
   Number of public wire bits:     271
   Number of ports:                  7
   Number of port bits:            132
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                682
     sky130_fd_sc_hd__a21o_2         2
     sky130_fd_sc_hd__a21oi_2        3
     sky130_fd_sc_hd__a221o_2        2
     sky130_fd_sc_hd__a22o_2        66
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__a31o_2         1
     sky130_fd_sc_hd__and2_2         3
     sky130_fd_sc_hd__and2b_2        1
     sky130_fd_sc_hd__and3_2         4
     sky130_fd_sc_hd__and3b_2        2
     sky130_fd_sc_hd__and4_2         2
     sky130_fd_sc_hd__dfrtp_2      162
     sky130_fd_sc_hd__dfxtp_2        8
     sky130_fd_sc_hd__inv_2        164
     sky130_fd_sc_hd__nand2_2       95
     sky130_fd_sc_hd__nand3_2        1
     sky130_fd_sc_hd__nor2_2         6
     sky130_fd_sc_hd__o21a_2         1
     sky130_fd_sc_hd__o21ai_2       35
     sky130_fd_sc_hd__o221a_2       29
     sky130_fd_sc_hd__or2_2         61
     sky130_fd_sc_hd__or4_2          1
     sky130_fd_sc_hd__or4b_2         1
     sky130_fd_sc_hd__xor2_2        31

   Chip area for module '\pm32': 8078.998400
     of which used for sequential elements: 4426.745600 (54.79%)

65. Executing Verilog backend.
Dumping module `\pm32'.

66. Executing JSON backend.
